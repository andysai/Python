# -*- coding: utf-8 -*-
"""Basic Visualizations -EXERCISE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16cNdRuzluzE-CKlXg3690BUCLCJyVVJT

---
#Crash Course Python for Data Science - Intro to Pandas
---
# 05 - Basic Visualizations
---

##STOP! BEFORE GOING ANY FURTHER...

1. Click "File" at the top.
2. Then, "Save a Copy in Drive."
3. Change the file name to something else, so you can differenciate it from the workshop notes. For example, put your name at the beggining: "Grace_Pandas Basic Viz-EXERCISE".

Now you have a copy of this notebook in your Drive account. This is the copy you'll edit and save for your own archives. You can come back to it as many times as you like to practice again! Be sure to do this for ***every*** exercise!

Remember, this exercises are open book, open neighbour, open everything! Try to do them on your own before looking at the solution samples. Join the slack channel to ask your questions. I will be in the channel too!

### Import pandas & matplotlib
"""

# Run this first!
import pandas as pd, matplotlib.pyplot as plt
plt.style.use(style='ggplot')
plt.rcParams['figure.figsize'] = (10, 6)

print('Libraries imported!')

"""### Import the data in the CSV file
You can find the data [here](https://raw.githubusercontent.com/plotly/datasets/master/data.csv). Should have a shape of (150000,11). Use this [resource](https://github.com/plotly/datasets/blob/master/data_dictionary.csv) for context.
"""

# Hint: You learned how to load .csv data in previous exercises. Check your notes
# or just google it quickly. Be resouceful!


### YOUR CODE GOES HERE ###
df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/data.csv')
df.shape

#@title Double click here for a sample solution

df = pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/data.csv')
df.shape

"""### Quickly inspect the head"""

### YOUR CODE GOES HERE ###
df.head()

#@title Double click here for a sample solution

df.head()

"""### Inspect the tail"""

### YOUR CODE GOES HERE ###
df.tail()

#@title Double click here for a sample solution

df.tail()

"""### Missing values?
You don't need to fill in these missing values, but don't forget that they're there!
"""

### YOUR CODE GOES HERE ###
df.isnull().sum()

#@title Double click here for a sample solution

df.isnull().sum()

"""### Out of the 11 features, which are discrete and which are continuous?


---

Double click here to edit this and write your answer below.

Answer:
"""

#@title Double click here for the solution

# Continuous: age, DebtRatio, MonthlyIncome,
# RevolvingUtilizationOfUnsecuredLines

# Discrete: All the others

"""### Plot each feature with the appropriate visualization

#### Histograms
"""

# Plot each feature/variable that should be plotted using a histogram. Use
# As many code cells as you need. Remember to try to do it on your own, before
# checking the sample answer below.

### YOUR CODE GOES HERE ####
continuous_columns = ['age', 'DebtRatio', 'MonthlyIncome',
                      'RevolvingUtilizationOfUnsecuredLines']
df[continuous_columns].hist(figsize=(10,11));

#@title Double click here for a sample solution

continuous_columns = ['age', 'DebtRatio', 'MonthlyIncome',
                      'RevolvingUtilizationOfUnsecuredLines']
df[continuous_columns].hist(figsize=(10,11));

"""#### Bar charts"""

# Plot all the features / variables that can be plotted
# using a bar chart.

### YOUR CODE GOES HERE ###
def category_count_plot(col, figsize=(8,4)):
    """
    Plots a simple bar chart of the total count for each category
    in the column specified. A figure size can optionally be
    specified.
    """
    plt.figure(figsize=figsize)
    df[col].value_counts().plot(kind='bar')
    plt.title(col)
    plt.xticks(rotation=0)
    plt.show()


# I'm using a for loop becuause I don't want to plot each
# figure individually. If you did it that way, is totally correct
# there are many ways of solving a problem.

for col in ['SeriousDlqin2yrs', 'NumberOfTime30-59DaysPastDueNotWorse',
                    'NumberOfOpenCreditLinesAndLoans', 'NumberOfTimes90DaysLate',
                    'NumberRealEstateLoansOrLines', 'NumberOfTime60-89DaysPastDueNotWorse',
                    'NumberOfDependents']:
    category_count_plot(col, figsize=(4,3))
    print(df[col].value_counts())

#@title Double click here for a sample solution

def category_count_plot(col, figsize=(8,4)):
    """
    Plots a simple bar chart of the total count for each category
    in the column specified. A figure size can optionally be
    specified.
    """
    plt.figure(figsize=figsize)
    df[col].value_counts().plot(kind='bar')
    plt.title(col)
    plt.xticks(rotation=0)
    plt.show()


# I'm using a for loop becuause I don't want to plot each
# figure individually. If you did it that way, is totally correct
# there are many ways of solving a problem.

for col in ['SeriousDlqin2yrs', 'NumberOfTime30-59DaysPastDueNotWorse',
                    'NumberOfOpenCreditLinesAndLoans', 'NumberOfTimes90DaysLate',
                    'NumberRealEstateLoansOrLines', 'NumberOfTime60-89DaysPastDueNotWorse',
                    'NumberOfDependents']:
    category_count_plot(col, figsize=(4,3))
    print(df[col].value_counts())

"""#### Scatterplots"""

# Plot all the features/variables that can be plotted using a scatterplot

### YOUR CODE GOES HERE ###
for var in continuous_columns[1:]:
  df.plot.scatter(x='age', y=[var],c='Red');

#@title Double click here for a sample solution

# Again, I'm using a for loop.

for var in continuous_columns[1:]:
  df.plot.scatter(x='age', y=[var],c='Red');

"""### Is there a relationship between any of the variables? 

---

Write your answer here:
"""

#@title Double click here for answer

# There is no apparent relationship just by looking at the plot

"""#### Boxplots"""

# Plot all the features/variables that can be plotted using a boxplot

### YOUR CODE GOES HERE ###
for var in continuous_columns:
  df.boxplot(column= var)
  plt.show()

#@title Double click here for a sample solution

# Again, I'm using a for loop.

for var in continuous_columns:
  df.boxplot(column= var)
  plt.show()

"""### Any outliers?


---
Write your answer here: 


"""

#@title  Double click here for the answer
# Several can be observed in every continuous variable

"""### Well done! You're halfway there to finish all the exercises. Keep it up! - Grace


---

"""