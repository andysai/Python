# -*- coding: utf-8 -*-
"""Functions & Packages - EXERCISE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SpT5Td4Fj3oXqVkvDLTLHUR3-WKrazjY

---
#Crash Course Python for Data Science - Intro to Python  
---
# 05 - Python Functions & Packages
---

##STOP! BEFORE GOING ANY FURTHER...  

1. Click "File" at the top.
2. Then, "Save a Copy in Drive."
3. Change the file name to something else, so you can differenciate it from the workshop notes. For example, put your name at the beggining: "Grace_Python Functions & Packages-EXERCISE".  

Now you have a copy of this notebook in your Drive account. This is the copy you'll edit and save for your own archives. You can come back to it as many times as you like to practice again! Be sure to do this for ***every*** exercise!

Remember, this exercises are open book, open neighbour, open everything! Try to do them on your own before looking at the solution samples. Join the slack channel to ask your questions. I will be in the channel too!

## Part 1: Functions

### Built-in functions


---


Make sure to run the cell below before beginning your assignment.
"""

x = ["a", "b", "c", "d", "e", "f"]

"""### 1.1 For the list of values provided and now saved in variable `x`, find the following:


*   The max?
*   The min?
*   Number of elements in the list?
*   Sort the list in _descending_ order.


"""

# The max
max(x)
## YOUR CODE GOES HERE ##

#@title Double click here for a sample solution

max(x)

# The min
min(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution 

min(x)

# Number of elements on the list 
len(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution
len(x)

# Sort the list in descending order
x.sort(reverse=True)
print(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution

x.sort(reverse=True)
print(x)

"""### Methods


---

### 1.2 Using the same list:

*  Remove the second to last element. 
*  Add the letter "z" to the list.
*  Empty out the list.
"""

# Remove the second to last element 
del x[1:]
print(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution

del x[1:]
print(x)

# Add letter z 
x.append("z")
print(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution 

x.append('z')
print(x)

# Empty the list
x = []
print(x)
### YOUR CODE GOES HERE ###

#@title Double click here for a sample solution

x.clear()
print(x)

"""### 1.3 For the string `y` provided:

* Split the string at every empty space.
"""

y = "to thine own self be true, and it must follow, as the night the day, thou canst not then be false to any man."

### YOUR CODE GOES HERE ###
print(y.split())

#@title Double click here for a sample solution

y.split()

"""### 1.4 Create a function that returns the sum of two numbers.

### Custom Functions


---
"""

### YOUR CODE GOES HERE ###
def sum1(a,b):
  return a + b
sum1(1, 1)

"""### 1.5 Create a function that, given a list of numbers, returns their average."""

#@title Double click here for a sample solution

def sum_(a,b):
  return  a+b

sum_(2,3)

### YOUR CODE GOES HERE ###
number_list = [1,2,3,4,5,6,7,8,9,10]
def avg(number_list):
  sum = 0
  for i in number_list:
    sum = sum + i
  return sum / len(number_list)
avg(number_list)

#@title Double click here for a sample solution

def av_(lst):
  return sum(lst) / len(lst)

av_([1,2,3,4,5])

"""### 1.6 Create a function that, given a string, returns that string capitalized and reversed. """

### YOUR CODE GOES HERE ###
def max_sort(str):
  return str[::-1].upper()
max_sort('acdb')

#@title Double click here for a sample solution

def up_rev(str_):
  return str_[::-1].upper()

up_rev('hola')

"""### 1.7 Create a function that, given a list of strings, concatenates them together with proper spacing."""

### YOUR CODE GOES HERE ###
def conn(str_list):
  interval = ", "
  return interval.join(str_list)

str_list = ["I", "Like", "Python"]
print(conn(str_list))

#@title Double click here for a sample solution

def concat_strings(lst):
  separator = ', '
  return separator.join(lst)

test = ['Python', 'Java', 'Ruby']
concat_strings(test)

"""## Part 2: Packages

### 2.1 Import the Random library and use it to create a list of ten random numbers from 0-50.
There are several ways to do this. Google around and find one that you can replicate here.
"""

### YOUR CODE GOES HERE ###
import random
number = random.sample(range(50), 10)
print(number)

#@title Double click here for a sample solution

import random
randomnums = random.sample(range(50), 10)
randomnums

"""### 2.2 Import the Numpy library and assign it an alias "np". Then change the list of random numbers you generated into a Numpy array."""

### YOUR CODE GOES HERE ###
import numpy as np

number_array = np.random.randint(1, 50, size=10)
number_array

#@title Double click here for a sample solution

import numpy as np
a = np.array(randomnums)
a

"""### 2.3 Calculate the mean of the Numpy array. (Hint: Numpy has a method for this.)

"""

### YOUR CODE GOES HERE ###
print(np.mean(number_array))

#@title Double click here for a sample solution

np.mean(a)

"""### BONUS: 
In the cell below, run the following command and see what happens :)  
`import this`  

"""

### YOUR CODE GOES HERE ###
import this
print(this)

"""### Make sure you save your Exercise notebook! See you next - G

"""